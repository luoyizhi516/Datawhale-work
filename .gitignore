# Task01：数组（1天）
## 1. 数组的定义

数组是具有一定顺序关系的若干对象组成的集合，组成数组的对象称为数组元素。

例如：
- 向量对应一维数组
- 矩阵对应二维数组


数组名表示群体的共性，即具有同一种数据类型；下标表示个体的个性，即各自占有独立的单元。

## 2. 数组的存储

**2.1 n维数组的定义**

下标由n个数组成的数组称为n维数组。

例如：
- `int[] a = new int[10]; //一维数组（线）`
- `int[ , ] a = new int[2,3];//二维数组 （面）`
- `int[ , , ] a = new int[2,3,4];//三维数组 （体）；类比：书（体）【2.页码 3.行 4.列】` 

**2.2 数组存储的特点**
- 数组元素在内存中按顺序连续存储。
- 数组的存储分配按照行（C、C++、C#等）或列（Forturn等）进行。
- 数组名表示该数组的首地址，是常量。

**2.3 常用数组的存储**

<u>一维数组`a[n]`</u>

各元素按下角标依次存放。

例：`int[] a = new int[5];`

![一维数组存储](https://img-blog.csdnimg.cn/20191218195949938.png)

<u>二维数组`a[m,n]`</u>

例：`int[ , ] a = new int[2,3];`

![二维数组存储](https://img-blog.csdnimg.cn/20191218200106993.png)


<u>三维数组`a[m,n,l]`</u>

第一维下标变化最慢，第三维（最后一维）下标变化最快。

例：`int[ , , ] a = new int[2,3,4];`

![三维数组的存储](https://img-blog.csdnimg.cn/20191218200209131.png)

## 3. 静态数组与动态数组

**3.1 静态数组**

在程序编译时分配空间的数组。

例：
`int[] a = new int[10];//静态数组（声明之后数组长度不可改变）`

**3.2 动态数组**

在程序运行时分配空间的数组（声明之后数组长度可根据问题而调整）。

![动态数组类图](https://img-blog.csdnimg.cn/2019121820102094.png)


以下代码为`python`版本：

**1. 利用动态数组解决数据存放问题。**
```
class Solution(object):
    """
    "根据约束选择存放的元素"
    """
    def DynamicArray(self, n):
        result=[]        
        for i in range(2,n-1):
            if i%5==0 or i%7==0:
                result.append(i)
        return result


if __name__ == '__main__':
    n=100
    solution = Solution()
    output = solution.DynamicArray(n)
    print(output)
```
**2. 托普利茨矩阵问题**

以下为`python`版本

```python
class Solution(object):
    """
    所有对角线上的元素都满足 a_1 = a_2, a_2 = a_3, a_{k-1} = a_ka
    对于对角线上的元素来说，如果当前元素不是第一个出现的元素，
    那么它前面的元素一定在当前元素的左上角。
    可以推出，对于位于坐标 (r, c) 上的元素，只需要检查 r == 0 OR c == 0 OR matrix[r-1][c-1] == matrix[r][c] 就可以了。

    """

    def isToeplitzMatrix(self, matrix):
        # all()表示所有都为true才返回true
        # python里面可以在列表推导式里面使用双层for循环，但不建议超过两层
        return all(r == 0 or c == 0 or matrix[r - 1][c - 1] == val
                   for r, row in enumerate(matrix)
                   for c, val in enumerate(row))


if __name__ == '__main__':
    matrix = [
        [1, 2, 3, 4],
        [5, 1, 2, 3],
        [9, 5, 1, 2]
    ]
    solution = Solution()
    output = solution.isToeplitzMatrix(matrix)
    print(output)
```
**3. 三数之和**
给定一个Int数组(N)，判断数组中是否存在三个元素x,y,z,使得三个元素之和为0，找出符合要求的所有元素
class Solution:
    '''
    双指针法思路： 固定 333 个指针中最左（最小）数字的指针 k，双指针 i，j 分设在数组索引 (k,len(nums))(k, len(nums))(k,len(nums)) 两端，通过双指针交替向中间移动，记录对于每个固定指针 k 的所有满足 nums[k] + nums[i] + nums[j] == 0 的 i,j 组合：
    当 nums[k] > 0 时直接break跳出：因为 nums[j] >= nums[i] >= nums[k] > 0，即 333 个数字都大于 000 ，在此固定指针 k 之后不可能再找到结果了。
    当 k > 0且nums[k] == nums[k - 1]时即跳过此元素nums[k]：因为已经将 nums[k - 1] 的所有组合加入到结果中，本次双指针搜索只会得到重复组合。
    i，j 分设在数组索引 (k,len(nums))(k, len(nums))(k,len(nums)) 两端，当i < j时循环计算s = nums[k] + nums[i] + nums[j]，并按照以下规则执行双指针移动：
        当s < 0时，i += 1并跳过所有重复的nums[i]；
        当s > 0时，j -= 1并跳过所有重复的nums[j]；
        当s == 0时，记录组合[k, i, j]至res，执行i += 1和j -= 1并跳过所有重复的nums[i]和nums[j]，防止记录到重复组合。
    '''
    def threeSum(self, nums:[int]) -> [[int]]:
        nums.sort()
        res, k = [], 0
        for k in range(len(nums) - 2):
            if nums[k] > 0: break # 1. because of j > i > k.
            if k > 0 and nums[k] == nums[k - 1]: continue # 2. skip the same `nums[k]`.
            i, j = k + 1, len(nums) - 1
            while i < j: # 3. double pointer
                s = nums[k] + nums[i] + nums[j]
                if s < 0:
                    i += 1
                    while i < j and nums[i] == nums[i - 1]: i += 1
                elif s > 0:
                    j -= 1
                    while i < j and nums[j] == nums[j + 1]: j -= 1
                else:
                    res.append([nums[k], nums[i], nums[j]])
                    i += 1
                    j -= 1
                    while i < j and nums[i] == nums[i - 1]: i += 1
                    while i < j and nums[j] == nums[j + 1]: j -= 1
        return res
if __name__ == '__main__':
    nums = [-1, 0, 1, 2, -1, -4]
    solution = Solution()
    output = solution.threeSum(nums)
    print(output)
